{"version":3,"file":"index.js","sources":["../src/main/kotlin/Main.kt","collections/Collections.kt","../src/main/kotlin/models/Models.kt","../src/main/kotlin/utils/PollIdGenerator.kt"],"sourcesContent":[null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license\n * that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\nimport kotlin.*\nimport kotlin.comparisons.compareValues\n\ninternal object EmptyIterator : ListIterator<Nothing> {\n    override fun hasNext(): Boolean = false\n    override fun hasPrevious(): Boolean = false\n    override fun nextIndex(): Int = 0\n    override fun previousIndex(): Int = -1\n    override fun next(): Nothing = throw NoSuchElementException()\n    override fun previous(): Nothing = throw NoSuchElementException()\n}\n\ninternal object EmptyList : List<Nothing>, Serializable, RandomAccess {\n    private const val serialVersionUID: Long = -7390468764508069838L\n\n    override fun equals(other: Any?): Boolean = other is List<*> && other.isEmpty()\n    override fun hashCode(): Int = 1\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun get(index: Int): Nothing = throw IndexOutOfBoundsException(\"Empty list doesn't contain element at index $index.\")\n    override fun indexOf(element: Nothing): Int = -1\n    override fun lastIndexOf(element: Nothing): Int = -1\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n    override fun listIterator(): ListIterator<Nothing> = EmptyIterator\n    override fun listIterator(index: Int): ListIterator<Nothing> {\n        if (index != 0) throw IndexOutOfBoundsException(\"Index: $index\")\n        return EmptyIterator\n    }\n\n    override fun subList(fromIndex: Int, toIndex: Int): List<Nothing> {\n        if (fromIndex == 0 && toIndex == 0) return this\n        throw IndexOutOfBoundsException(\"fromIndex: $fromIndex, toIndex: $toIndex\")\n    }\n\n    private fun readResolve(): Any = EmptyList\n}\n\ninternal fun <T> Array<out T>.asCollection(): Collection<T> = ArrayAsCollection(this, isVarargs = false)\n\nprivate class ArrayAsCollection<T>(val values: Array<out T>, val isVarargs: Boolean) : Collection<T> {\n    override val size: Int get() = values.size\n    override fun isEmpty(): Boolean = values.isEmpty()\n    override fun contains(element: T): Boolean = values.contains(element)\n    override fun containsAll(elements: Collection<T>): Boolean = elements.all { contains(it) }\n    override fun iterator(): Iterator<T> = values.iterator()\n    // override hidden toArray implementation to prevent copying of values array\n    public fun toArray(): Array<out Any?> = values.copyToArrayOfAny(isVarargs)\n}\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\npublic fun <T> emptyList(): List<T> = EmptyList\n\n/**\n * Returns a new read-only list of given elements.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.readOnlyList\n */\npublic fun <T> listOf(vararg elements: T): List<T> = if (elements.size > 0) elements.asList() else emptyList()\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> listOf(): List<T> = emptyList()\n\n/**\n * Returns an empty new [MutableList].\n * @sample samples.collections.Collections.Lists.emptyMutableList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableListOf(): MutableList<T> = ArrayList()\n\n/**\n * Returns an empty new [ArrayList].\n * @sample samples.collections.Collections.Lists.emptyArrayList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> arrayListOf(): ArrayList<T> = ArrayList()\n\n/**\n * Returns a new [MutableList] with the given elements.\n * @sample samples.collections.Collections.Lists.mutableList\n */\npublic fun <T> mutableListOf(vararg elements: T): MutableList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new [ArrayList] with the given elements.\n * @sample samples.collections.Collections.Lists.arrayList\n */\npublic fun <T> arrayListOf(vararg elements: T): ArrayList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new read-only list either of single given element, if it is not null, or empty list if the element is null. The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(element: T?): List<T> = if (element != null) listOf(element) else emptyList()\n\n/**\n * Returns a new read-only list only of those given elements, that are not null.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(vararg elements: T?): List<T> = elements.filterNotNull()\n\n/**\n * Creates a new read-only list with the specified [size], where each element is calculated by calling the specified\n * [init] function. The [init] function returns a list element given its index.\n * @sample samples.collections.Collections.Lists.readOnlyListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> List(size: Int, init: (index: Int) -> T): List<T> = MutableList(size, init)\n\n/**\n * Creates a new mutable list with the specified [size], where each element is calculated by calling the specified\n * [init] function. The [init] function returns a list element given its index.\n * @sample samples.collections.Collections.Lists.mutableListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList(size: Int, init: (index: Int) -> T): MutableList<T> {\n    val list = ArrayList<T>(size)\n    repeat(size) { index -> list.add(init(index)) }\n    return list\n}\n\n/**\n * Returns an [IntRange] of the valid indices for this collection.\n * @sample samples.collections.Collections.Collections.indicesOfCollection\n */\npublic val Collection<*>.indices: IntRange\n    get() = 0..size - 1\n\n/**\n * Returns the index of the last item in the list or -1 if the list is empty.\n *\n * @sample samples.collections.Collections.Lists.lastIndexOfList\n */\npublic val <T> List<T>.lastIndex: Int\n    get() = this.size - 1\n\n/**\n * Returns `true` if the collection is not empty.\n * @sample samples.collections.Collections.Collections.collectionIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns this Collection if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Collections.collectionOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.orEmpty(): Collection<T> = this ?: emptyList()\n\n/**\n * Returns this List if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Lists.listOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>?.orEmpty(): List<T> = this ?: emptyList()\n\n/**\n * Checks if all elements in the specified collection are contained in this collection.\n *\n * Allows to overcome type-safety restriction of `containsAll` that requires to pass a collection of type `Collection<E>`.\n * @sample samples.collections.Collections.Collections.collectionContainsAll\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> Collection<T>.containsAll(elements: Collection<T>): Boolean = this.containsAll(elements)\n\ninternal fun <T> List<T>.optimizeReadOnlyList() = when (size) {\n    0 -> emptyList()\n    1 -> listOf(this[0])\n    else -> this\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of its elements,\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchOnComparable\n * @sample samples.collections.Collections.Lists.binarySearchWithBoundaries\n */\npublic fun <T : Comparable<T>> List<T?>.binarySearch(element: T?, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = compareValues(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the specified [comparator],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted according to the specified [comparator].\n * @sample samples.collections.Collections.Lists.binarySearchWithComparator\n */\npublic fun <T> List<T>.binarySearch(element: T, comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparator.compare(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for an element having the key returned by the specified [selector] function\n * equal to the provided [key] value using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of keys of its elements.\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements with the specified [key], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element with the specified [key], if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchByKey\n */\npublic inline fun <T, K : Comparable<K>> List<T>.binarySearchBy(\n    key: K?,\n    fromIndex: Int = 0,\n    toIndex: Int = size,\n    crossinline selector: (T) -> K?\n): Int =\n    binarySearch(fromIndex, toIndex) { compareValues(selector(it), key) }\n\n// do not introduce this overload --- too rare\n//public fun <T, K> List<T>.binarySearchBy(key: K, comparator: Comparator<K>, fromIndex: Int = 0, toIndex: Int = size(), selector: (T) -> K): Int =\n//        binarySearch(fromIndex, toIndex) { comparator.compare(selector(it), key) }\n\n\n/**\n * Searches this list or its range for an element for which [comparison] function returns zero using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the provided [comparison],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements for which [comparison] returns zero, there is no guarantee which one will be found.\n *\n * @param comparison function that compares an element of the list with the element being searched.\n *\n * @return the index of the found element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchWithComparisonFunction\n */\npublic fun <T> List<T>.binarySearch(fromIndex: Int = 0, toIndex: Int = size, comparison: (T) -> Int): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparison(midVal)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Checks that `from` and `to` are in\n * the range of [0..size] and throws an appropriate exception, if they aren't.\n */\nprivate fun rangeCheck(size: Int, fromIndex: Int, toIndex: Int) {\n    when {\n        fromIndex > toIndex -> throw IllegalArgumentException(\"fromIndex ($fromIndex) is greater than toIndex ($toIndex).\")\n        fromIndex < 0 -> throw IndexOutOfBoundsException(\"fromIndex ($fromIndex) is less than zero.\")\n        toIndex > size -> throw IndexOutOfBoundsException(\"toIndex ($toIndex) is greater than size ($size).\")\n    }\n}\n\n\n",null,null],"names":[],"mappings":"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"}