/*
 * This file is generated by jOOQ.
 */
package com.packt.serverless.kotlin.letspoll.models.generated.tables;


import com.packt.serverless.kotlin.letspoll.models.generated.Indexes;
import com.packt.serverless.kotlin.letspoll.models.generated.Keys;
import com.packt.serverless.kotlin.letspoll.models.generated.Public;
import com.packt.serverless.kotlin.letspoll.models.generated.tables.records.RespondentRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {"http://www.jooq.org", "jOOQ version:3.11.2"},
    comments = "This class is generated by jOOQ")
@SuppressWarnings({"all", "unchecked", "rawtypes"}) public class Respondent
    extends TableImpl<RespondentRecord> {

    private static final long serialVersionUID = -1738485372;

    /**
     * The reference instance of <code>public.respondent</code>
     */
    public static final Respondent RESPONDENT = new Respondent();

    /**
     * The class holding records for this type
     */
    @Override public Class<RespondentRecord> getRecordType() {
        return RespondentRecord.class;
    }

    /**
     * The column <code>public.respondent.a_respondent_id</code>.
     */
    public final TableField<RespondentRecord, Integer> A_RESPONDENT_ID =
        createField("a_respondent_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false)
            .defaultValue(DSL
                .field("nextval('respondent_a_respondent_id_seq'::regclass)",
                    org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.respondent.respondent_id</code>.
     */
    public final TableField<RespondentRecord, String> RESPONDENT_ID =
        createField("respondent_id", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this,
            "");

    /**
     * The column <code>public.respondent.respondent_email_id</code>.
     */
    public final TableField<RespondentRecord, String> RESPONDENT_EMAIL_ID =
        createField("respondent_email_id", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false),
            this, "");

    /**
     * The column <code>public.respondent.respondent_display_name</code>.
     */
    public final TableField<RespondentRecord, String> RESPONDENT_DISPLAY_NAME =
        createField("respondent_display_name",
            org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.respondent.respondent_token</code>.
     */
    public final TableField<RespondentRecord, String> RESPONDENT_TOKEN =
        createField("respondent_token", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false),
            this, "");

    /**
     * Create a <code>public.respondent</code> table reference
     */
    public Respondent() {
        this(DSL.name("respondent"), null);
    }

    /**
     * Create an aliased <code>public.respondent</code> table reference
     */
    public Respondent(String alias) {
        this(DSL.name(alias), RESPONDENT);
    }

    /**
     * Create an aliased <code>public.respondent</code> table reference
     */
    public Respondent(Name alias) {
        this(alias, RESPONDENT);
    }

    private Respondent(Name alias, Table<RespondentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Respondent(Name alias, Table<RespondentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Respondent(Table<O> child, ForeignKey<O, RespondentRecord> key) {
        super(child, key, RESPONDENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override public List<Index> getIndexes() {
        return Arrays
            .<Index>asList(Indexes.RESPONDENT_PKEY, Indexes.RESPONDENT_RESPONDENT_DISPLAY_NAME_KEY,
                Indexes.RESPONDENT_RESPONDENT_EMAIL_ID_KEY, Indexes.RESPONDENT_RESPONDENT_ID_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override public Identity<RespondentRecord, Integer> getIdentity() {
        return Keys.IDENTITY_RESPONDENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override public UniqueKey<RespondentRecord> getPrimaryKey() {
        return Keys.RESPONDENT_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override public List<UniqueKey<RespondentRecord>> getKeys() {
        return Arrays.<UniqueKey<RespondentRecord>>asList(Keys.RESPONDENT_PKEY,
            Keys.RESPONDENT_RESPONDENT_ID_KEY, Keys.RESPONDENT_RESPONDENT_EMAIL_ID_KEY,
            Keys.RESPONDENT_RESPONDENT_DISPLAY_NAME_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override public Respondent as(String alias) {
        return new Respondent(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override public Respondent as(Name alias) {
        return new Respondent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override public Respondent rename(String name) {
        return new Respondent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override public Respondent rename(Name name) {
        return new Respondent(name, null);
    }
}
