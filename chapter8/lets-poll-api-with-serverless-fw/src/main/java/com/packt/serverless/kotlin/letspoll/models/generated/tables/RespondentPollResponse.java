/*
 * This file is generated by jOOQ.
 */
package com.packt.serverless.kotlin.letspoll.models.generated.tables;


import com.packt.serverless.kotlin.letspoll.models.generated.Indexes;
import com.packt.serverless.kotlin.letspoll.models.generated.Keys;
import com.packt.serverless.kotlin.letspoll.models.generated.Public;
import com.packt.serverless.kotlin.letspoll.models.generated.tables.records.RespondentPollResponseRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {"http://www.jooq.org", "jOOQ version:3.11.2"},
    comments = "This class is generated by jOOQ")
@SuppressWarnings({"all", "unchecked", "rawtypes"}) public class RespondentPollResponse
    extends TableImpl<RespondentPollResponseRecord> {

    private static final long serialVersionUID = 1546646196;

    /**
     * The reference instance of <code>public.respondent_poll_response</code>
     */
    public static final RespondentPollResponse RESPONDENT_POLL_RESPONSE =
        new RespondentPollResponse();

    /**
     * The class holding records for this type
     */
    @Override public Class<RespondentPollResponseRecord> getRecordType() {
        return RespondentPollResponseRecord.class;
    }

    /**
     * The column <code>public.respondent_poll_response.a_respondent_poll_response_id</code>.
     */
    public final TableField<RespondentPollResponseRecord, Integer> A_RESPONDENT_POLL_RESPONSE_ID =
        createField("a_respondent_poll_response_id",
            org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(
                "nextval('respondent_poll_response_a_respondent_poll_response_id_seq'::regclass)",
                org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.respondent_poll_response.a_respondent_id</code>.
     */
    public final TableField<RespondentPollResponseRecord, Integer> A_RESPONDENT_ID =
        createField("a_respondent_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.respondent_poll_response.a_poll_id</code>.
     */
    public final TableField<RespondentPollResponseRecord, Integer> A_POLL_ID =
        createField("a_poll_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.respondent_poll_response.response</code>.
     */
    public final TableField<RespondentPollResponseRecord, String> RESPONSE =
        createField("response", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>public.respondent_poll_response</code> table reference
     */
    public RespondentPollResponse() {
        this(DSL.name("respondent_poll_response"), null);
    }

    /**
     * Create an aliased <code>public.respondent_poll_response</code> table reference
     */
    public RespondentPollResponse(String alias) {
        this(DSL.name(alias), RESPONDENT_POLL_RESPONSE);
    }

    /**
     * Create an aliased <code>public.respondent_poll_response</code> table reference
     */
    public RespondentPollResponse(Name alias) {
        this(alias, RESPONDENT_POLL_RESPONSE);
    }

    private RespondentPollResponse(Name alias, Table<RespondentPollResponseRecord> aliased) {
        this(alias, aliased, null);
    }

    private RespondentPollResponse(Name alias, Table<RespondentPollResponseRecord> aliased,
        Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> RespondentPollResponse(Table<O> child,
        ForeignKey<O, RespondentPollResponseRecord> key) {
        super(child, key, RESPONDENT_POLL_RESPONSE);
    }

    /**
     * {@inheritDoc}
     */
    @Override public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.RESPONDENT_POLL_RESPONSE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override public Identity<RespondentPollResponseRecord, Integer> getIdentity() {
        return Keys.IDENTITY_RESPONDENT_POLL_RESPONSE;
    }

    /**
     * {@inheritDoc}
     */
    @Override public UniqueKey<RespondentPollResponseRecord> getPrimaryKey() {
        return Keys.RESPONDENT_POLL_RESPONSE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override public List<UniqueKey<RespondentPollResponseRecord>> getKeys() {
        return Arrays
            .<UniqueKey<RespondentPollResponseRecord>>asList(Keys.RESPONDENT_POLL_RESPONSE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override public List<ForeignKey<RespondentPollResponseRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RespondentPollResponseRecord, ?>>asList(
            Keys.RESPONDENT_POLL_RESPONSE__RESPONDENT_POLL_RESPONSE_A_RESPONDENT_ID_FKEY,
            Keys.RESPONDENT_POLL_RESPONSE__RESPONDENT_POLL_RESPONSE_A_POLL_ID_FKEY);
    }

    public Respondent respondent() {
        return new Respondent(this,
            Keys.RESPONDENT_POLL_RESPONSE__RESPONDENT_POLL_RESPONSE_A_RESPONDENT_ID_FKEY);
    }

    public Poll poll() {
        return new Poll(this,
            Keys.RESPONDENT_POLL_RESPONSE__RESPONDENT_POLL_RESPONSE_A_POLL_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override public RespondentPollResponse as(String alias) {
        return new RespondentPollResponse(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override public RespondentPollResponse as(Name alias) {
        return new RespondentPollResponse(alias, this);
    }

    /**
     * Rename this table
     */
    @Override public RespondentPollResponse rename(String name) {
        return new RespondentPollResponse(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override public RespondentPollResponse rename(Name name) {
        return new RespondentPollResponse(name, null);
    }
}
