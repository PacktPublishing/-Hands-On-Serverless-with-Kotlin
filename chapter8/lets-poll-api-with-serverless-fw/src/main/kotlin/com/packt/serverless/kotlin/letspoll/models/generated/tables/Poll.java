/*
 * This file is generated by jOOQ.
 */
package com.packt.serverless.kotlin.letspoll.models.generated.tables;


import com.packt.serverless.kotlin.letspoll.models.generated.Indexes;
import com.packt.serverless.kotlin.letspoll.models.generated.Keys;
import com.packt.serverless.kotlin.letspoll.models.generated.Public;
import com.packt.serverless.kotlin.letspoll.models.generated.tables.records.PollRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {"http://www.jooq.org", "jOOQ version:3.11.2"},
    comments = "This class is generated by jOOQ")
@SuppressWarnings({"all", "unchecked", "rawtypes"}) public class Poll
    extends TableImpl<PollRecord> {

    private static final long serialVersionUID = -177228367;

    /**
     * The reference instance of <code>public.poll</code>
     */
    public static final Poll POLL = new Poll();

    /**
     * The class holding records for this type
     */
    @Override public Class<PollRecord> getRecordType() {
        return PollRecord.class;
    }

    /**
     * The column <code>public.poll.a_poll_id</code>.
     */
    public final TableField<PollRecord, Integer> A_POLL_ID = createField("a_poll_id",
        org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(DSL
            .field("nextval('poll_a_poll_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)),
        this, "");

    /**
     * The column <code>public.poll.poll_id</code>.
     */
    public final TableField<PollRecord, String> POLL_ID =
        createField("poll_id", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>public.poll.poll_title</code>.
     */
    public final TableField<PollRecord, String> POLL_TITLE =
        createField("poll_title", org.jooq.impl.SQLDataType.VARCHAR(500), this, "");

    /**
     * The column <code>public.poll.poll_question</code>.
     */
    public final TableField<PollRecord, String> POLL_QUESTION =
        createField("poll_question", org.jooq.impl.SQLDataType.VARCHAR(2000), this, "");

    /**
     * The column <code>public.poll.created_by</code>.
     */
    public final TableField<PollRecord, Integer> CREATED_BY =
        createField("created_by", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.poll</code> table reference
     */
    public Poll() {
        this(DSL.name("poll"), null);
    }

    /**
     * Create an aliased <code>public.poll</code> table reference
     */
    public Poll(String alias) {
        this(DSL.name(alias), POLL);
    }

    /**
     * Create an aliased <code>public.poll</code> table reference
     */
    public Poll(Name alias) {
        this(alias, POLL);
    }

    private Poll(Name alias, Table<PollRecord> aliased) {
        this(alias, aliased, null);
    }

    private Poll(Name alias, Table<PollRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Poll(Table<O> child, ForeignKey<O, PollRecord> key) {
        super(child, key, POLL);
    }

    /**
     * {@inheritDoc}
     */
    @Override public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.POLL_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override public Identity<PollRecord, Integer> getIdentity() {
        return Keys.IDENTITY_POLL;
    }

    /**
     * {@inheritDoc}
     */
    @Override public UniqueKey<PollRecord> getPrimaryKey() {
        return Keys.POLL_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override public List<UniqueKey<PollRecord>> getKeys() {
        return Arrays.<UniqueKey<PollRecord>>asList(Keys.POLL_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override public List<ForeignKey<PollRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PollRecord, ?>>asList(Keys.POLL__POLL_CREATED_BY_FKEY);
    }

    public Respondent respondent() {
        return new Respondent(this, Keys.POLL__POLL_CREATED_BY_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override public Poll as(String alias) {
        return new Poll(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override public Poll as(Name alias) {
        return new Poll(alias, this);
    }

    /**
     * Rename this table
     */
    @Override public Poll rename(String name) {
        return new Poll(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override public Poll rename(Name name) {
        return new Poll(name, null);
    }
}
